package av

import (
	"bytes"
	"encoding/json"
	"fmt"
	jsoniter "github.com/json-iterator/go"
	"github.com/sirupsen/logrus"
	"net/http"
)

func (a *AccountVerifier) TransferCredits(username string) {
	cookies, err := a.loginer.Login(username)
	if err != nil {
		logrus.WithFields(logrus.Fields{
			"func": "av.Login",
		}).Errorf("error logging in %s : %v", username, err)
		return
	}
	defer a.loginer.Logout()

	err = a.makeTransfer(cookies)
	if err != nil {
		logrus.WithFields(logrus.Fields{"func":"av.makeTransfer"}).Errorf("could not make transfer: %v", err)
		return
	}
	logrus.WithFields(logrus.Fields{"func":"av.makeTransfer"}).Info("successfully transferred credits")
}

type TransferRequest struct {
	Username        string `json:"username"`
	ConfirmUsername string `json:"ConfirmUsername"`
	Message         string `json:"message"`
	Points          string `json:"points"`
}


type TransferResponse struct {
	TransactionNumber string `json:"TransactionNumber"`
	RespMessage       string `json:"RespMessage"`
}

func (a *AccountVerifier) makeTransfer(authCookie string) error {
	tr := &TransferRequest{
		Username:        a.to,
		ConfirmUsername: a.to,
		Message:         "enjoy",
		Points:          "1000",
	}
	bod, _ := json.Marshal(tr)

	retries := 0
	retry:
	req, _ := http.NewRequest("POST","https://rewards.███.com/api/EN/Rest/CreateTransfer", bytes.NewBuffer(bod))
	req.Header.Set("Cookie", authCookie)
	req.Header.Set("Referer","https://rewards.███.com/transfer-points")
	req.Header.Set("Content-Type","application/json; charset=UTF-8")
	resp, err := a.http.Do(req)

	if err != nil {
		return err
	}
	if resp.StatusCode != 200 {
		if retries < 20 {
			retries++
			goto retry
		}
		return fmt.Errorf("endpoint returned %s", resp.Status)
	}
	respTx := &TransferResponse{}
	err = jsoniter.NewDecoder(resp.Body).Decode(&respTx)
	if err != nil {
		return err
	}

	logrus.WithFields(logrus.Fields{"func":"makeTransfer"}).Infof("made transaction: %s", respTx.TransactionNumber)

	return a.verifyTransfer(respTx.TransactionNumber)
}

func (a *AccountVerifier) verifyTransfer(txNumber string) error {
	retries := 0
	retry:
	u := fmt.Sprintf("https://rewards.███.com/api/EN/Rest/ConfirmTransfer?tNum=%s&confirmation=Approve", txNumber)
	resp, err := http.Post(u, "application/x-www-form-urlencoded", nil)

	if err != nil {
		return err
	}
	if resp.StatusCode != 200 {
		if retries < 20 {
			retries++
			goto retry
		}
		return fmt.Errorf("endpoint returned %s", resp.Status)
	}

	body := &TransferResponse{}
	err = jsoniter.NewDecoder(resp.Body).Decode(&body)
	if err != nil {
		return err
	}
	if body.RespMessage != "Success" {
		return fmt.Errorf("Non-success (%s): %s", body.TransactionNumber, body.RespMessage)
	}

	logrus.WithFields(logrus.Fields{"func":"verifyTransfer"}).Infof("verified transaction: %s", body.TransactionNumber)

	return nil
}
