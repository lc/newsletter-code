package creator

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/pkg/errors"
	"io/ioutil"
	"math/rand"
	"net/http"
	"strconv"
	"strings"
	"time"
)

const letterBytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

type AccountCreator struct {
	domain string
	http *http.Client
}

func NewAccountCreator(emailDomain string) *AccountCreator {
	return &AccountCreator{
		domain: emailDomain,
		http: &http.Client{
			Timeout: 15*time.Second,
		},
	}
}

func (a *AccountCreator) CreateAccount() (string, error) {
	randName := generateString(10)
	bod, err := a.generatePostData(randName)
	if err != nil {
		return "", errors.Wrap(err,"could not marshal post data")
	}
	retries := 0
	retry:
	resp, err := a.http.Post("https://rewards.███.com/api/EN/Profile/SignUp","application/json", bytes.NewBuffer(bod))
	if err != nil {
		return "", errors.Wrap(err,"error creating account")
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", errors.Wrap(err, "could not read body")
	}
	response := string(body)
	if resp.StatusCode != 200 {
		if retries < 15 {
			retries++
			goto retry
		}
		return "", fmt.Errorf("got non-200 response: %v: %s", resp.StatusCode, body)
	}
	if strings.Contains(response, "Unverified") {
		return randName+"@"+a.domain, nil
	}
	return "", fmt.Errorf("account added to existing account")
}

type Signup struct {
	Phonetype            string `json:"phonetype"`
	Country              string `json:"country"`
	UsernameVerification string `json:"UsernameVerification"`
	Username             string `json:"username"`
	ConfirmUsername      string `json:"ConfirmUsername"`
	Password             string `json:"password"`
	ConfirmPassword      string `json:"ConfirmPassword"`
	Firstname            string `json:"firstname"`
	Lastname             string `json:"lastname"`
	Address1             string `json:"address1"`
	City                 string `json:"city"`
	State                string `json:"state"`
	Zipcode              string `json:"zipcode"`
	Number               string `json:"number"`
	TermsAndConditions   bool   `json:"TermsAndConditions"`
}

func (a *AccountCreator) generatePostData(randName string) ([]byte, error) {

	data := &Signup{
		Phonetype: "Home Phone",
		Country: "USA",
		UsernameVerification:"",
		Username: fmt.Sprintf("%s@%s",randName, a.domain),
		ConfirmUsername: fmt.Sprintf("%s@%s",randName, a.domain),
		Password: "cdl@Hacker1!",
		ConfirmPassword: "cdl@Hacker1!",
		Firstname: randName,
		Lastname: "L"+randName,
		Address1: "1337 Hacker Way",
		City: "Test",
		State: "CA",
		Zipcode: "57042",
		Number: generatePhoneNumber(),
		TermsAndConditions: true,
	}
	return json.Marshal(data)
}


/* helper functions */
func generatePhoneNumber() string {
	rand.Seed(time.Now().UnixNano())
	return strconv.Itoa(rand.Intn(9999999999-1111111111) + 1111111111)
}

func generateString(n int) string {
	rand.Seed(time.Now().UnixNano())
	b := make([]byte, n)
	for i := range b {
		b[i] = letterBytes[rand.Intn(len(letterBytes))]
	}
	return string(b)
}
