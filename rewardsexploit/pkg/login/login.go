package login

import (
	"fmt"
	"github.com/go-rod/rod"
	"github.com/go-rod/rod/lib/input"
	"github.com/go-rod/rod/lib/launcher"
	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
	"time"
)

type LoginWorker struct {
	browser *rod.Browser
}

func NewLoginWorker() *LoginWorker {
	curl := launcher.New().Set("no-sandbox", "").MustLaunch() // no-sandbox? spicy.
	return &LoginWorker{
		browser: rod.New().ControlURL(curl).MustConnect(),
	}
}

func (l *LoginWorker) Login(username string) (string, error) {
	logrus.WithFields(logrus.Fields{"func":"lw.Login"}).Infof("attempting to login: %s", username)
	page := l.browser.MustPage("")
	defer page.Close()
	err := page.Timeout(2 * time.Minute).Navigate("https://customerlogin.███.com/█████.onmicrosoft.com/oauth2/v2.0/authorize?p=████████&scope=openid&response_mode=query&response_type=id_token&client_id=███&redirect_uri=https://rewards.███.com/api/en/profile/WebSSO&channel=████&nonce=defaultNonce&ui_locales=en-US")
	if err != nil {
		return "", err
	}
	page.Timeout(60 * time.Second).MustElement("#logonIdentifier").MustInput(username)
	if err != nil {
		return "", err
	}
	page.Timeout(60 * time.Second).MustElement("#password").MustInput("cdl@Hacker1!").MustPress(input.Enter)
	if err != nil {
		return "", err
	}

	time.Sleep(time.Second*7)

	retries := 0

	retry:
	time.Sleep(1*time.Second)

	cookies, err := page.Cookies([]string{"https://rewards.███.com/"})
	if err != nil {
		if retries < 15 {
			retries++
			goto retry
		}
		return "", errors.Wrap(err,"could not get cookies")
	}
		for _, cookie := range cookies {
			if cookie.Name == "_█████.Rewards.AspNet.ApplicationCookie" {
				return fmt.Sprintf("%s=%s",cookie.Name, cookie.Value), nil
			}
		}

	return "", errors.New("could not get cookies")
}
func (l *LoginWorker) Logout() error {
	logoutUrl := "https://customerlogin.███.com/█████.onmicrosoft.com/oauth2/v2.0/logout?p=█████&post_logout_redirect_uri=https://rewards.███.com/overview"
	page := l.browser.MustPage("")
	defer page.Close()
	err := page.Timeout(2 * time.Minute).Navigate(logoutUrl)
	if err != nil {
		return err
	}

	return nil
}
func (l *LoginWorker) Close() {
	l.browser.MustClose()
}
